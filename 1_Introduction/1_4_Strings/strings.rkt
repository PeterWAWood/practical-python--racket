#lang racket

(define-namespace-anchor anchor)
(define ns (namespace-anchor->namespace anchor))

(define (expect txt)
  (displayln (string-append "Expect: " txt)))
(define (python py)
  (displayln (string-append "Python: "  py)))
(define (racket rkt)
  (cond
    [(list? rkt) (display "Racket: ")
                 (writeln rkt)
                 (eval rkt ns)]
    [(string? rkt) (displayln (string-append "Racket: " rkt))]
    [else          (displayln "Racket: Oops")]))
(define (separator) (displayln ""))
(define (title ttl) (displayln (string-upcase ttl)))

(separator)
(title "1.4 Strings")

(separator)
(title "Representing Literal Test")
(python "a = 'Yeah but no yeah but...'")
(racket '(define a "\"Yeah but no yeah but..\""))
(python "b = \"computer says no\"")
(racket '(define b "\"computer says no\""))
(python "c = '''
Look into my eyes, look into my eyes, the eyes, the eyes,
not around the eyes,
don't look around the eyes,
look into my eyes, you're under.
'''
")
(racket '(define c "\"
Look into my eyes, look into my eyes, the eyes, the eyes,
not around the eyes,
don't look around the eyes,
look into my eyes, you're under.
\""))

(separator)
(title "String Escape Codes")
(python "'\\n'      Line feed")
(racket "\"\\n\"")
(python "'\\r'      Carriage return")
(racket "\"\\r\"")
(python "'\\t'      Tab")
(racket "\"\\t\"")
(python "'\\''      Literal single quote")
(racket "Not needed in Racket")
(python "'\\\"'      Literal double quote")
(racket "\"\\\"\"")
(python "'\\'       Literal backslash")
(racket "\"\\\\\"")

(separator)
(title "String Representation")
(python "a = '\\xf1'          # a = 'ñ'")
(racket "(define a \"\\uF1\")")
(python "b = '\\u2200'        # b = '∀'")
(racket "(define b \"\\u2200\")")
(python "c = '\\U0001D122'    # c = '𝄢'")
(racket "(define c \"\\u01D122\")")
(python "d = '\\N{FOR ALL}'   # d = '∀'")
(racket "No equivalent")

(separator)
(title "String Indexing")
(python "aa = 'Hello world'")
(racket '(define aa "Hello world"))
(python "b = aa[0]          # 'H'")
(expect "#\\H")
(racket '(string-ref aa 0))
(python "c = aa[4]          # 'o'")
(expect "#\\o")
(racket '(string-ref aa 4))
(python "d = aa[-1]         # 'd' (end of string)")
(expect "#\\d")
(racket '(string-ref aa (- (string-length aa) 1)))
(python "d = aa[:5]     # 'Hello'")
(racket '(substring aa 0 5))
(python "e = aa[6:]     # 'world'")
(racket '(substring aa 6))
(python "f = aa[3:8]    # 'lo wo'")
(racket '(substring aa 3 8))
(python "g = aa[-5:]    # 'world'")
(racket '(substring aa (- (string-length aa) 5)))

(separator)
(title "String operations")
(python "# Concatenation (+)")
(python "aaa = 'Hello' + 'World'   # 'HelloWorld'")
(racket '(define aaa (string-append "Hello" "World")))
(racket '(displayln aaa)) 
(python "bbb = 'Say ' + aaa          # 'Say HelloWorld'")
(racket '(define bbb (string-append "Say " aaa))) 
(racket '(displayln bbb))

(separator)
(python "# Length (len)")
(python "sss = 'Hello'")
(python "len(sss)                  # 5")
(racket '(define sss "Hello"))
(racket '(displayln (string-length sss)))

(separator)
(python "# Membership test (`in`, `not in`)")
(python "t = 'e' in sss            # True")
(racket '(displayln (string-contains? sss "e")))
(python "f = 'x' in sss            # False")
(racket '(displayln (string-contains? sss "x")))
(python "g = 'hi' not in sss       # True")
(racket '(displayln (not (string-contains? sss "hi"))))

(separator)
(python "# Replication (s * n)")
(python "rep = sss * 5             # 'HelloHelloHelloHelloHello'")
(racket '(define sss "Hello"))
(racket '(define original-sss (string-copy sss)))
(racket '(for ([i (in-range 1 5)])
         (set! sss (string-append sss original-sss))))
(racket '(displayln sss))

(separator)
(title "String methods")
(python " s = '  Hello '")
(python "t = s.strip()     # 'Hello'")
(racket '(string-trim "  Hello "))
(separator)
(python "s = 'Hello'")
(python "l = s.lower()     # 'hello'")
(racket '(string-downcase "Hello"))
(python "u = s.upper()     # 'HELLO'")
(racket '(string-upcase "Hello"))

(python "s = 'Hello world'")
(python "t = s.replace('Hello' , 'Hallo')   # 'Hallo world'")
(racket '(define ssss "Hello world"))
(racket '(displayln (string-replace ssss "Hello" "Hallo")))

(python "s.endswith(suffix)     # Check if string ends with suffix")
(racket "(string-suffix? s)")
(python "s.find(t)              # First occurrence of t in s")
(racket "(car (car (regexp-match-positions t s)))")
(python "s.index(t)             # First occurrence of t in s")
(racket "(car (car (regexp-match-positions t s)))")
(python "s.isalpha()            # Check if characters are alphabetic")
(racket "(regexp-match? #px\"^\\p{L}+$\" (string-normalize-nfc s)))")
(python "s.isdigit()            # Check if characters are numeric")
(racket "(regexp-match? #px\"^[0-9]+$\" s)")
(python "s.islower()            # Check if characters are lower-case")
(racket "(string-equal? s (string-downcase s))")
(python "s.isupper()            # Check if characters are upper-case")
(racket "(sting-equal? a (string upcase s))")
(python "s.join(slist)          # Join a list of strings")
(python "                       #  using s as delimiter")
(racket "(string-join slist s)")
(python "s.lower()              # Convert to lower case")
(racket "(string-downcase s)")
(python "s.replace(old,new)     # Replace text")
(racket "(string-replace s old new)")
(python "s.rfind(t)             # Search for t from end of string")
(racket "(car (last (regexp-match-positions 
                      (regexp (string-append \".*(\" t \").*$\"))
                      s)))")
(python "s.rindex(t)            # Search for t from end of string")
(racket "(car (last (regexp-match-positions 
                      (regexp (string-append \".*(\" t \").*$\"))
                      s)))")
(python "s.split([delim])       # Split string into list of substrings")
(racket "(string-split s delim)")
(python "s.startswith(prefix)   # Check if string starts with prefix")
(racket "(string-prefix? s prefix)")
(python "s.strip()              # Strip leading/trailing space")
(racket "(string-trim s)")
(python "s.upper()              # Convert to upper case")
(racket "(string-upcase s)")

(separator)
(title "String Conversions")
(python ">>> x = 42")
(python ">>> str(x)")
(python "'42'")
(racket '(~a 42))

(separator)
(title "Exercises")

(separator)
(title "Exercise 1.13")
(python "symbols = 'AAPL,IBM,MSFT,YHOO,SCO'")
(racket '(define symbols "AAPL,IBM,MSFT,YHOO,SCO"))
(python "symbols[0]")
(racket '(string-ref symbols 0))
(python "symbols[1]")
(racket '(string-ref symbols 1))
(python "symbols[2]")
(racket '(string-ref symbols 2))
(python "symbols[-1]")
(racket '(string-ref symbols (- (string-length symbols) 1)))
(python "symbols[-2]")
(racket '(string-ref symbols (- (string-length symbols) 2)))

(separator)
(title "Exercise 1.14")
(python "symbols + 'GOOG'")
(racket '(displayln (string-append symbols "GOOG")))
(python "symbols = symbols + ',GOOG'")
(racket '(set! symbols (string-append symbols ",GOOG")))
(racket '(displayln symbols))
(python "symbols = symbols + 'HPQ,'")
(racket '(set! symbols (string-append "HPQ," symbols)))
(racket '(displayln symbols))

(separator)
(title "Exercise 1.15")
(python "'IBM in Symbols")
(expect "#t")
(racket '(string-contains? symbols "IBM"))
(python "'AA' in symbols")
(expect "#t")
(racket '(equal? (string-contains? symbols "AA") #t))
(python "'CAT' in symbols")
(expect "#f")
(racket '(string-contains? symbols "CAT"))

(separator)
(title "Exercise 1.16")
(python "symbols.lower()")
(racket '(string-downcase symbols))
(python "lowersyms = symbols.lower()")
(racket '(define lowersyms (string-downcase symbols)))
(racket '(displayln lowersyms))
(python "symbols.find('MSFT')")
(expect "13")
(racket '(car (car (regexp-match-positions "MSFT" symbols))))
(python "symbols[13:17]")
(expect "MSFT")
(racket '(displayln (substring symbols 13 17)))
(python "symbols = symbols.replace('SCO','DOA')")
(expect "HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG")
(racket '(set! symbols (string-replace symbols "SCO" "DOA")))
(racket '(displayln symbols))
(python "name = '   IBM   \n'")
(python "name = name.strip()    # Remove surrounding whitespace")
(python "name")
(expect "IBM")
(racket '(displayln (string-trim "  IBM  \n")))

(separator)
(title "Exercise 1.17")
(python "name = 'IBM'")
(python "shares = 100")
(python "price = 91.1")
(python "f'{shares} shares of {name} at ${price:0.2f}'")
(expect "100 shares of IBM at $91.10")
(racket '(define name "IBM"))
(racket '(define shares 100))
(racket '(define price 91.1))
(racket '(displayln
           (string-append
             (~a shares)
             " shares of "
             name
             " at $"
             (real->decimal-string price 2))))

(separator)
(title "Exercise 1.18")
(python "text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.'")
(racket '(define text "Today is 3/27/2018. Tomorrow is 3/28/2018."))
(python "# Find all occurrences of a date")
(python "import re")
(python "re.findall(r'\\d+/\\d+/\\d+', text)")
(expect  "'(\"3/27/2018\", \"3/28/2018\")")
(racket '(regexp-match* #px"\\d+/\\d+/\\d+" text))
(python "# Replace all occurrences of a date with replacement text")
(python "re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text)")
(expect "\"Today is 2018-3-27. Tomorrow is 2018-3-28.\"")
(racket '(regexp-replace* #px"(\\d+)/(\\d+)/(\\d+)" text "\\3-\\1-\\2"))

