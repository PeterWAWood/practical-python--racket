#lang racket

(define-namespace-anchor anchor)
(define ns (namespace-anchor->namespace anchor))

(define (expect txt)
  (displayln (string-append "Expect: " txt)))
(define (python py)
  (displayln (string-append "Python: "  py)))
(define (racket rkt)
  (cond
    [(list? rkt) (display "Racket: ")
                 (writeln rkt)
                 (eval rkt ns)]
    [(string? rkt) (displayln (string-append "Racket: " rkt))]
    [else          (displayln "Racket: Oops")]))
(define (separator) (displayln ""))
(define (title ttl) (displayln (string-upcase ttl)))

(title "1.5 Lists")

(title "Creating a list")
(python " names = [ 'Elwood', 'Jake', 'Curtis' ]")
(racket '(define names (list "Elwood" "Jake" "Curtis")))
(racket '(println names))
(python "nums = [ 39, 38, 42, 65, 111 ]")
(racket '(define nums '(39 38 42 65 111)))
(racket '(println nums))
(python ">>> line = 'GOOG,100,490.10'")
(python ">>> row = line.split(',')")
(python ">>> row")
(python " ['GOOG', '100', '490.10']")
(racket '(define line "GOOG,100,490.10"))
(racket '(define row (string-split line ",")))
(racket '(println row))

(separator)
(title "List Operations")
(python "names.append('Murphy')    # Adds at end")
(racket '(set! names (append names '("Murphy"))))
(racket '(println names))
(python "names.insert(2, 'Aretha') # Inserts in middle")
(racket '(displayln (append (take names 2) '("Aretha") (drop names 2))))
(racket '(println names))
(python "s = [1, 2, 3]")
(python "t = ['a', 'b']")
(python "s + t")
(racket '(define s '(1 2 3)))
(racket '(define t '("a" "b")))
(racket '(println (append s t)))
(python "names = [ 'Elwood', 'Jake', 'Curtis' ]")
(python "names[0]  # 'Elwood'")
(python "names[1]  # 'Jake'")
(python "names[2]  # 'Curtis'")
(racket '(set! names '("Elwood" "Jake" "Curtis")))
(racket '(println (list-ref names 0)))
(racket '(println (list-ref names 1)))
(racket '(println (list-ref names 2)))
(python "names[-1] # 'Curtis'")
(racket '(println (last names)))
(racket '(println (list-ref names (- (length names) 1))))
(python "names[1] = 'Joliet Jake'")
(racket '(println (list-set names 1 "Joliet Jake")))
(python "names = ['Elwood','Jake','Curtis']")
(python "len(names)  # 3")
(racket '(set! names '("Elwood" "Jake" "Curtis")))
(racket '(println (length names)))
(python "'Elwood' in names       # True")
(python "'Britney' not in names  # True")
(racket '(displayln (number? (index-of names "Elwood"))))
(racket '(displayln (false? (index-of names "Britney"))))
(python "s = [1, 2, 3]")
(python "s * 3   # [1, 2, 3, 1, 2, 3, 1, 2, 3]")
(racket '(define s '(1 2 3)))
(racket '(println (flatten (make-list 3 s))))

(separator)
(title "List Iteration and Search")
(python "for name in names:")
(python "    # use name")
(python "    # e.g. print(name)")
(racket '(define (print name) (displayln name)))
(racket '(for-each print names))
(python "names = ['Elwood','Jake','Curtis']")
(python "names.index('Curtis')   # 2")
(racket '(set! names '("Elwood" "Jake" "Curtis")))
(racket '(println (index-of names "Curtis")))

(separator)
(title "List Removal")
(python "names.remove('Curtis')")
(expect "'(Elwood Jake)")
(racket '(println (remove "Curtis" names)))
(python "del names[1]")
(expect "('Elwood Curtis)")
(racket '(println (remove (list-ref names 1) names)))

(separator)
(title "List Sorting")
(python "s = [10, 1, 7, 3]")
(python "s.sort() # [1, 3, 7, 10]")
(racket '(println (sort '(10 1 7 3) <)))
(python "s.sort(reverse=True)        # [10, 7, 3, 1]")
(racket '(println (sort '(10 1 7 3) >)))
(python "# It works with any ordered data")
(python "s = ['foo', 'bar', 'spam']")
(python "s.sort()                    # ['bar', 'foo', 'spam']")
(racket '(println (sort '("foo" "bar" "spam") string<?)))
(python "t = sorted(s)               # s unchanged, t holds sorted values")
(racket '(define unsorted '(10 1 7 3)))
(racket '(define sorted (sort unsorted <)))
(racket '(println unsorted))
(racket '(println sorted))

(separator)
(title "Lists and Math")
(python ">>> nums = [1, 2, 3, 4, 5]")
(python ">>> nums * 2")
(python "[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]")
(racket "+ and * do not work with lists in racket")
(racket "there is a separate vector type for vector/matrix maths")

(separator)
(title "Exercises")
(python "symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG'")
(python "symlist = symbols.split(',')")
(racket '(define symbols "HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG"))
(racket '(define symlist (string-split symbols ",")))

(separator)
(title "Exercise 1.19")
(python ">>> symlist[0]")
(expect "HPQ")
(racket '(displayln (list-ref symlist 0)))
(python ">>> symlist[1]")
(expect "AAPL")
(racket '(displayln (second symlist)))
(python ">>> symlist[-1]")
(expect "GOOG")
(racket '(displayln (last symlist)))
(python "symlist[-2]")
(expect "DOA")
(racket '(displayln (list-ref symlist (- (length symlist) 2))))
(python ">>> symlist[2] = 'AIG'")
(expect "(HPQ, AAPL, AIG, MSFT, YHOO, DOA, GOOG)")
(racket '(define symlist (list-set symlist 2 "AIG")))
(racket '(displayln symlist))
(python ">>> symlist[0:3]")
(expect "(HPQ AAPL AIG)")
(racket '(displayln (take symlist 3)))
(python ">>> symlist[-2:]")
(expect "(DOA GOOG)")
(racket '(displayln (drop symlist (- (length symlist) 2))))
(python ">>> mysyms = []")
(python ">>> mysyms.append('GOOG')")
(python ">>> mysyms")
(python "['GOOG']")
(expect "(GOOG)")
(racket '(define mysyms empty))
(racket '(define mysyms (cons "GOOG" mysyms)))
(racket '(displayln mysyms))
(python ">>> symlist[-2:] = mysyms")
(python ">>> symlist")
(python "['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG']")
(expect "(HPQ AAPL AIG MSFT YHOO GOOG)")
(racket '(define symlist (append (take symlist (- (length symlist) 2)) mysyms)) )
(racket '(displayln symlist))

(separator)

(racket '(displayln "Exercise 1.20"))
(python ">>> for s in symlist:")
(python "        print('s =', s)")
(racket '(displayln "Expect:"))
(racket '(displayln "       s = HPQ"))
(racket '(displayln "       s = AAPL"))
(racket '(displayln "       s = AIG"))
(racket '(displayln "       s = MSFT"))
(racket '(displayln "       s = YHOO"))
(racket '(displayln "       s = GOOG"))
(racket '(for-each
  (lambda (s) (displayln (string-append "s = " s)))
               symlist))
  
(separator)
(title "Exercise 1.21")
(python "# Is 'AIG' IN the `symlist`?")
(expect "#t")
(racket '(displayln (cons? (member "AIG" symlist))))
(python "# Is 'AA' IN the `symlist`?")
(expect "#f")
(racket '(displayln (member "AA" symlist)))
(python "# Is 'CAT' NOT IN the `symlist`?")
(expect "#t")
(racket '(displayln (not (member "CAT" symlist))))

(separator)
(title "Exercise 1.22")
(python "# append 'RHT'")
(expect "(HPQ AAPL AIG MSFT YHOO GOOG RHT)")
(racket '(set! symlist (append symlist '("RHT"))))
(racket '(displayln symlist))
(python "# Insert 'AA' as the second item in the list")
(expect "(HPQ AA AAPL AIG MSFT YHOO GOOG RHT)")
(racket '(set! symlist (append (take symlist 1) '("AA") (drop symlist 1))))
(racket '(displayln symlist))
(python "# Remove 'MSFT'")
(expect "(HPQ AA AAPL AIG YHOO GOOG RHT)")
(racket '(set! symlist (remove "MSFT" symlist)))
(racket '(displayln symlist))
(python "# Append 'YHOO'")
(expect "(HPQ AA AAPL AIG YHOO GOOG RHT YHOO)")
(racket '(set! symlist (append symlist '("YHOO"))))
(racket '(displayln symlist))
(python "# Find the first index of 'YHOO'")
(expect "4")
(racket '(displayln (index-of symlist "YHOO")))
(python "symlist[4]")
(expect "YHOO")
(racket '(displayln (list-ref symlist 4)))
(python "symlist.count('YHOO')")
(expect "2")
(racket '(displayln (length (indexes-of symlist "YHOO"))))
(python "# Remove first occurrence 'YHOO'")
(expect "(HPQ AA AAPL AIG GOOG RHT YHOO)")
(racket '(set! symlist (remove "YHOO" symlist)))
(racket '(displayln symlist))

(separator)
(title "Exercise 1.23")
(python "symlist.sort()")
(expect "(AA AAPL AIG GOOG HPQ RHT YHOO)")
(racket '(displayln (sort symlist string<?)))
(python "symlist.sort(reverse=True)")
(expect "(YHOO RHT HPQ GOOG AIG AAPL AA)")
(racket '(set! symlist (sort symlist string>?)))
(racket '(displayln symlist))

(separator)
(title "Exercise 1.24")
(python "a = ','.join(symlist)")
(expect "YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA")
(racket '(displayln
  (list->string (flatten (map string->list (add-between symlist ":"))))))
(python "b = ':'.join(symlist)")
(expect "YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA")
(racket '(define b
  (list->string (flatten (map string->list (add-between symlist ":"))))))
(racket '(displayln b))
(python "c = ''.join(symlist)")
(expect "YHOORHTHPQGOOGAIGAAPLAA")
(racket '(define c (list->string (flatten (map string->list symlist)))))
(racket '(displayln c))
 
(separator)
(title "Exercise 1.25")
(python "nums = [101, 102, 103]")
(python "items = ['spam', symlist, nums]")
(racket '(define nums '(101 102 103)))
(racket '(define items (cons "spam" (cons symlist (cons nums empty)))))
(python ">>> items[0]")
(expect "spam")
(racket '(displayln (list-ref items 0)))
(python "items[0][0]")
(expect "s")
(racket '(displayln (string-ref (list-ref items 0) 0)))
(python "items[1]")
(expect "(YHOO RHT HPQ GOOG AIG AAPL AA)")
(racket '(displayln (list-ref items 1)))
(python "items[1][1]")
(expect "RHT")
(racket '(displayln (list-ref (list-ref items 1) 1)))
(python "items[1][1][2]")
(expect "T")
(racket '(displayln (string-ref (list-ref (list-ref items 1) 1) 2)))
(python "items[2]")
(expect "(101, 102, 103)")
(racket '(displayln (list-ref items 2)))
(python "items[2][1]")
(expect "102")
(racket '(displayln (list-ref (list-ref items 2) 1)))

