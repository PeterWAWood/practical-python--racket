#lang racket

(define ns (make-base-namespace))

(define (expect txt)
  (displayln (string-append "Expect: " txt)))
(define (python py)
  (displayln (string-append "Python: "  py)))
(define (racket rkt)
  (cond
    [(list? rkt) (display "Racket: ")
                 (displayln rkt)
                 (eval rkt ns)]
    [(string? rkt) (displayln (string-append "Racket: " rkt))]
    [else          (displayln "Racket: Oops")]))
(define (separator) (displayln ""))
(define (title ttl) (displayln (string-upcase ttl)))

(separator)
(title "1.3 Numbers")

(separator)
(title "Booleans (bool)")
(racket "Booleans are not numbers")
(separator)

(python "a = True")
(racket '(define a #t))
(expect "#t")
(racket '(displayln a))
(python "b = false")
(racket '(define b #f))
(expect "#f")
(racket '(displayln b))
(python "c = 4 + True # 5")
(racket '(define c 4))
(racket "(+ c true)")
(expect "Contract violation")
(racket '(with-handlers ([exn:fail:contract?
                 (lambda (err) (displayln "Contract Violation"))])
   (+ c true)))

(separator)
(title "Integers (int)")
(separator)

(python "Integer (int)")
(racket "exact")
(racket "You can only define a symbol once in racket")
(racket "So different names have been used from the original")
(python "aa = 37")
(racket '(define aa 37))
(python "bb = -299392993727716627377128481812241231")
(racket '(define bb -299392993727716627377128481812241231))
(expect "-299392993727716627377128481812241231")
(racket '(displayln bb))
(python "cc = 0x7fa8      # Hexadecimal")
(racket "(define cc #x7af8)")
(racket "translates #x7af8 to 31480 when it \"reads\" the code")
(racket '(define cc #x7af8))
(expect "31480")
(racket '(displayln cc))
(python "dc = 0o253       # Octal")
(racket "(define dd #o253)")
(python "ee = 0b10001111  # Binary")
(racket "(define ee #b10001111)")
(python "x + y      Add")
(racket "(+ x y)")
(python "x - y      Subtract")
(racket "(- x y)")
(python "x * y      Multiply")
(racket "(* x y)")
(python "x / y      Divide (produces a float)")
(racket "(/ x y)    Produces a fraction")
(racket '(/ 10 3))
(displayln (/ 10 3))
(racket "(/ 10 3.0) will produce a float")
(racket '(/ 10 3.0))
(python "x // y     Floor Divide (produces an integer)")
(racket "(quotient x y)")
(python "x % y      Modulo (remainder)")
(racket "(remainder x y)")
(python "x ** y     Power")
(racket "(expt x y)")
(python "x << n     Bit shift left")
(racket "(arithmetic-shift x n)")
(python "x >> n     Bit shift right")
(racket "(arithmetic-shift x -n)")
(python "x & y      Bit-wise AND")
(racket "(bitwise-and x y)")
(python "x | y      Bit-wise OR")
(racket "(bitwise-ior x y)")
(python "x ^ y      Bit-wise XOR")
(racket "(bitwise-xor x y)")
(python "~x         Bit-wise NOT")
(racket "(bitwise-not x y)")
(python "abs(x)     Absolute value")
(racket "(abs x)")

(separator)
(title "Floating point (float)")
(separator)

(python "aaa = 37.45")
(racket '(define aaa 37.4))
(python "bbb = 4e5 # 4 x 10**5 or 400,000")
(racket "(define bbb 4e5)")
(python "ccc = -1.345e-10")
(racket '(define ccc -1.345e-10))

(separator)

(python ">>> aaaa = 2.1 + 4.2")
(python ">>> aaaa == 6.3")
(python "False")
(racket '(define aaaa (+ 2.1 4.2)))
(racket '(= aaaa 6.3))
(expect "#f")
(python ">>> aaaa")
(python "6.300000000000001")
(expect "6.300000000000001")
(racket '(displayln aaaa))

(separator)

(python "x + y      Add")
(racket "(+ x y)")
(python "x - y      Subtract")
(racket "(- x y)")
(python "x * y      Multiply")
(racket "(* x y)")
(python "x / y      Divide")
(racket "(/ x y)")
(python "x // y     Floor Divide")
(racket "(quotient x y)")
(python "x % y      Modulo")
(racket "(remainder x y)")
(python "x ** y     Power")
(racket "(expt x y)")
(python "abs(x)     Absolute value")
(racket "(abs x)")

(separator)

(python "import math")
(racket "no need to import")
(python "a = math.sqrt(x)")
(racket "(define a (sqrt x))") 
(python "b = math.sin(x)")
(racket "(define b (sin x))")
(python "c = math.cos(x)")
(racket "(define c (cos x))")
(python "d = math.tan(x)")
(racket "(define d (tan x))")
(python "e = math.log(x)")
(racket "(define e (log x))")

(separator)
(title "Comparisons")
(separator)

(python "x < y      Less than")
(racket "(< x y)")
(python "x <= y     Less than or equal")
(racket "(<= x y)")
(python "x > y      Greater than")
(racket "(> x y)")
(python "x >= y     Greater than or equal")
(racket "(>= x y)")
(python "x == y     Equal to")
(racket "(= x y)")
(python "x != y     Not equal to")
(racket "(not (= x y))")

(separator)

(python "if b >= a and b <= c:")
(python "    print('b is between a and c')")
(racket "(when (and (>= b a) (<= b c))
              (displayln \"b is between a and c\"))")
(python "if not (b < a or b > c):")
(python "    print('b is still between a and c')")
(racket "(when (not (or (< b a) (> b c)))
              (displayln \"b is still between a and c\"))")

(separator)
(title "Converting Numbers")
(separator)

(python "a = int(x)    # Convert x to integer")
(racket "(define a (inexact->exact (floor x)))")
(python "b = float(x)  # Convert x to float")
(racket "(define b (exact->inexact x))")

(python ">>> aaaaa = 3.14159")
(python ">>> int(aaaaa)")
(python "3")
(racket '(define aaaaa 3.14159))
(racket '(inexact->exact (floor aaaaa)))
(python ">>> bbbbb = '3.14159' # It also works with strings containing numbers")
(python ">>> float(bbbbb)")
(python "3.14159")
(racket "functions usually only work on restricted types of values")
(racket "a specific function must be called to convert a string to a float")
(racket "(string->number \"3.14159\")")
(string->number "3.14159")

